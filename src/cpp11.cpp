// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// tinyint.cpp
SEXP compress(integers x);
extern "C" SEXP _tinyint_compress(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(compress(cpp11::as_cpp<cpp11::decay_t<integers>>(x)));
  END_CPP11
}
// tinyint.cpp
integers get(SEXP ptr, int pos);
extern "C" SEXP _tinyint_get(SEXP ptr, SEXP pos) {
  BEGIN_CPP11
    return cpp11::as_sexp(get(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(pos)));
  END_CPP11
}
// tinyint.cpp
integers gets(SEXP ptr, integers pos);
extern "C" SEXP _tinyint_gets(SEXP ptr, SEXP pos) {
  BEGIN_CPP11
    return cpp11::as_sexp(gets(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<integers>>(pos)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_tinyint_compress", (DL_FUNC) &_tinyint_compress, 1},
    {"_tinyint_get",      (DL_FUNC) &_tinyint_get,      2},
    {"_tinyint_gets",     (DL_FUNC) &_tinyint_gets,     2},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_tinyint(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
