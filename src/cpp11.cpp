// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// tinyint.cpp
SEXP tinyint_compress_(integers x);
extern "C" SEXP _tinyint_tinyint_compress_(SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(tinyint_compress_(cpp11::as_cpp<cpp11::decay_t<integers>>(x)));
  END_CPP11
}
// tinyint.cpp
integers tinyint_get_(SEXP ptr, int pos);
extern "C" SEXP _tinyint_tinyint_get_(SEXP ptr, SEXP pos) {
  BEGIN_CPP11
    return cpp11::as_sexp(tinyint_get_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<int>>(pos)));
  END_CPP11
}
// tinyint.cpp
integers tinyint_gets_(SEXP ptr, integers pos);
extern "C" SEXP _tinyint_tinyint_gets_(SEXP ptr, SEXP pos) {
  BEGIN_CPP11
    return cpp11::as_sexp(tinyint_gets_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<integers>>(pos)));
  END_CPP11
}
// tinyint.cpp
integers tinyint_size_(SEXP ptr);
extern "C" SEXP _tinyint_tinyint_size_(SEXP ptr) {
  BEGIN_CPP11
    return cpp11::as_sexp(tinyint_size_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr)));
  END_CPP11
}
// tinyint.cpp
integers tinyint_index_(SEXP ptr, integers x);
extern "C" SEXP _tinyint_tinyint_index_(SEXP ptr, SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(tinyint_index_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<integers>>(x)));
  END_CPP11
}
// tinyint.cpp
logicals tinyint_contains_(SEXP ptr, integers x);
extern "C" SEXP _tinyint_tinyint_contains_(SEXP ptr, SEXP x) {
  BEGIN_CPP11
    return cpp11::as_sexp(tinyint_contains_(cpp11::as_cpp<cpp11::decay_t<SEXP>>(ptr), cpp11::as_cpp<cpp11::decay_t<integers>>(x)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_tinyint_tinyint_compress_", (DL_FUNC) &_tinyint_tinyint_compress_, 1},
    {"_tinyint_tinyint_contains_", (DL_FUNC) &_tinyint_tinyint_contains_, 2},
    {"_tinyint_tinyint_get_",      (DL_FUNC) &_tinyint_tinyint_get_,      2},
    {"_tinyint_tinyint_gets_",     (DL_FUNC) &_tinyint_tinyint_gets_,     2},
    {"_tinyint_tinyint_index_",    (DL_FUNC) &_tinyint_tinyint_index_,    2},
    {"_tinyint_tinyint_size_",     (DL_FUNC) &_tinyint_tinyint_size_,     1},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_tinyint(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
